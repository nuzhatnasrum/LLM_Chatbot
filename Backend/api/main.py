from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import os
from dotenv import load_dotenv
from app.services.chat_handler import handle_query

# Load API Key
load_dotenv()
API_KEY = os.getenv("OPENAI_API_KEY")

if not API_KEY:
    raise ValueError("⚠️ API_KEY is missing! Please check your .env file.")

# Initialize FastAPI
chatbot_api = FastAPI()

# Define Request Model
class UserQuery(BaseModel):
    question: str

# Define Chatbot Endpoint with Debugging
@chatbot_api.post("/query/")
async def get_response(user_input: UserQuery):
    """Processes user query and returns chatbot response."""
    try:
        answer = handle_query(user_input.question)
        if not answer:
            raise ValueError("No response generated by the AI.")
        return {"response": answer}
    except ValueError as err:
        raise HTTPException(status_code=400, detail=f"ValueError: {err}")  # Show real error
    except Exception as err:
        raise HTTPException(status_code=500, detail=f"Internal Error: {str(err)}")  # Show real error
